options:
  parameters:
    author: root
    catch_exceptions: 'True'
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: no_gui
    hier_block_src_path: '.:'
    id: LoRaOTALoopback
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: LoRa OTA Loopback
    window_size: (1000,1000)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 8]
    rotation: 0
    state: enabled

blocks:
- name: freq
  id: variable
  parameters:
    comment: ''
    value: '915000000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [280, 12.0]
    rotation: 0
    state: true
- name: samp_rate
  id: variable
  parameters:
    comment: ''
    value: '1000000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [184, 12]
    rotation: 0
    state: enabled
- name: blocks_message_debug_0
  id: blocks_message_debug
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    en_uvec: 'True'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [656, 472.0]
    rotation: 0
    state: true
- name: blocks_message_strobe_0
  id: blocks_message_strobe
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    msg: pmt.intern("TEST")
    period: '2000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [72, 188.0]
    rotation: 0
    state: disabled
- name: blocks_null_sink_0
  id: blocks_null_sink
  parameters:
    affinity: ''
    alias: ''
    bus_structure_sink: '[[0,],]'
    comment: ''
    num_inputs: '1'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [352, 392.0]
    rotation: 0
    state: disabled
- name: blocks_null_source_0
  id: blocks_null_source
  parameters:
    affinity: ''
    alias: ''
    bus_structure_source: '[[0,],]'
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_outputs: '1'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [352, 304.0]
    rotation: 0
    state: disabled
- name: epy_block_0
  id: epy_block
  parameters:
    _source_code: "import time\nimport tkinter as tk\nfrom tkinter import simpledialog\n\
      from gnuradio import gr\nimport pmt\n\nclass message_prompt(gr.sync_block):\n\
      \    def __init__(self):\n        gr.sync_block.__init__(\n            self,\n\
      \            name=\"message_prompt\",\n            in_sig=None,\n          \
      \  out_sig=None,\n        )\n        self.message_port_register_out(pmt.intern(\"\
      out\"))\n        self.root = tk.Tk()\n        self.root.withdraw()  # Hide the\
      \ main Tkinter window\n        self.schedule_next_prompt()\n\n    def schedule_next_prompt(self):\n\
      \        self.root.after(0, self.prompt_for_message)\n\n    def prompt_for_message(self):\n\
      \        payload = simpledialog.askstring(\"Input\", \"Enter payload:\")\n \
      \       if payload is not None:\n            message = pmt.intern(payload)\n\
      \            for _ in range(3):\n                self.message_port_pub(pmt.intern(\"\
      out\"), message)\n                time.sleep(2)\n        self.schedule_next_prompt()\n\
      \n    def work(self, input_items, output_items):\n        return len(output_items)\n\
      \n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('message_prompt', 'message_prompt', [], [], [('out', 'message', 1)],
      '', [])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [56, 256.0]
    rotation: 0
    state: true
- name: epy_block_0_0
  id: epy_block
  parameters:
    _source_code: "import os\nfrom gnuradio import gr\nimport pmt\n\nclass payload_writer(gr.sync_block):\n\
      \    def __init__(self, filepath=\"/home/ubuntu/Documents/Summer-Research-Flowgraphs/message_storage.txt\"\
      ):\n        gr.sync_block.__init__(\n            self,\n            name=\"\
      payload_writer\",\n            in_sig=None,\n            out_sig=None,\n   \
      \     )\n        self.message_port_register_in(pmt.intern(\"payload\"))\n  \
      \      self.set_msg_handler(pmt.intern(\"payload\"), self.handle_msg)\n    \
      \    self.filepath = filepath\n        \n        # Overwrite the file every\
      \ time the flowgraph is run\n        with open(self.filepath, 'w') as file:\n\
      \            file.write(\"\")\n\n    def handle_msg(self, msg):\n        if\
      \ pmt.is_pair(msg):\n            payload = pmt.symbol_to_string(pmt.cdr(msg))\n\
      \        else:\n            payload = pmt.symbol_to_string(msg)\n        \n\
      \        with open(self.filepath, 'a') as file:\n            file.write(payload\
      \ + \"\\n\")\n\n    def work(self, input_items, output_items):\n        return\
      \ len(output_items)\n\n"
    affinity: ''
    alias: ''
    comment: ''
    filepath: '"/home/ubuntu/Documents/Summer-Research-Flowgraphs/message_storage.txt"'
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('payload_writer', 'payload_writer', [('filepath', "'/home/ubuntu/Documents/Summer-Research-Flowgraphs/message_storage.txt'")],
      [('payload', 'message', 1)], [], '', ['filepath'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [648, 596.0]
    rotation: 0
    state: true
- name: lora_rx_0
  id: lora_rx
  parameters:
    affinity: ''
    alias: ''
    bw: '125000'
    comment: ''
    cr: '1'
    has_crc: 'True'
    impl_head: 'False'
    ldro: '2'
    maxoutbuf: '0'
    minoutbuf: '0'
    pay_len: '255'
    print_rx: '[True,True]'
    samp_rate: samp_rate
    sf: '7'
    soft_decoding: 'True'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [336, 436.0]
    rotation: 0
    state: true
- name: lora_tx_0
  id: lora_tx
  parameters:
    affinity: ''
    alias: ''
    bw: '125000'
    comment: ''
    cr: '1'
    frame_zero_padd: '1280'
    has_crc: 'True'
    impl_head: 'False'
    ldro: '2'
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: '1000000'
    sf: '7'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [296, 164.0]
    rotation: 0
    state: true
- name: soapy_limesdr_sink_0
  id: soapy_limesdr_sink
  parameters:
    affinity: ''
    alias: ''
    bandwidth: '0.0'
    center_freq: freq
    comment: ''
    dev_args: ''
    freq_correction: '0'
    gain: '20.0'
    samp_rate: samp_rate
    type: fc32
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [576, 216.0]
    rotation: 0
    state: enabled
- name: soapy_limesdr_source_0
  id: soapy_limesdr_source
  parameters:
    affinity: ''
    alias: ''
    bandwidth: '0.0'
    center_freq: freq
    comment: ''
    dev_args: ''
    freq_correction: '0'
    gain: '20.0'
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: samp_rate
    type: fc32
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [32, 476.0]
    rotation: 0
    state: enabled

connections:
- [blocks_message_strobe_0, strobe, lora_tx_0, in]
- [epy_block_0, out, lora_tx_0, in]
- [lora_rx_0, out, blocks_message_debug_0, print]
- [lora_rx_0, out, epy_block_0_0, payload]
- [lora_tx_0, '0', soapy_limesdr_sink_0, '0']
- [soapy_limesdr_source_0, '0', lora_rx_0, '0']

metadata:
  file_format: 1
  grc_version: 3.10.3.0
