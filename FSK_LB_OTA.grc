options:
  parameters:
    author: ''
    catch_exceptions: 'True'
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: qt_gui
    hier_block_src_path: '.:'
    id: FSK_LB_OTA
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: Not titled yet
    window_size: (1000,1000)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 8]
    rotation: 0
    state: enabled

blocks:
- name: samp_rate
  id: variable
  parameters:
    comment: ''
    value: '1000000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [184, 12]
    rotation: 0
    state: enabled
- name: epy_block_0
  id: epy_block
  parameters:
    _source_code: "import numpy as np\nfrom gnuradio import gr\n\nclass blk(gr.sync_block):\n\
      \    def __init__(self, samp_rate=1e6, fsk_deviation=500e3):\n        gr.sync_block.__init__(\n\
      \            self,\n            name='FSK Modulation',\n            in_sig=[np.uint8],\n\
      \            out_sig=[np.complex64]\n        )\n        self.samp_rate = samp_rate\n\
      \        self.fsk_deviation = fsk_deviation\n        self.center_freq = 0\n\
      \        self.phase_inc0 = 2.0 * np.pi * (self.center_freq - self.fsk_deviation)\
      \ / self.samp_rate\n        self.phase_inc1 = 2.0 * np.pi * (self.center_freq\
      \ + self.fsk_deviation) / self.samp_rate\n        self.phase = 0\n        self.counter\
      \ = 0  # Initialize \n\n    def work(self, input_items, output_items):\n   \
      \     in0 = input_items[0]\n        out = output_items[0]\n\n        for i in\
      \ range(len(in0)):\n            if in0[i] == 0:\n                self.phase\
      \ += self.phase_inc0\n            else:\n                self.phase += self.phase_inc1\n\
      \            out[i] = np.exp(1j * self.phase)\n            if self.phase > 2.0\
      \ * np.pi:\n                self.phase -= 2.0 * np.pi\n\n        # Print first\
      \ 10 modulated bits every 1000 iterations\n        #if self.counter % 1000 ==\
      \ 0:\n         #   print(\"Modulated Bits:\", in0[:0])\n        #self.counter\
      \ += 1\n\n        return len(output_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    fsk_deviation: samp_rate/10
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: samp_rate
  states:
    _io_cache: ('FSK Modulation', 'blk', [('samp_rate', '1000000.0'), ('fsk_deviation',
      '500000.0')], [('0', 'byte', 1)], [('0', 'complex', 1)], '', ['fsk_deviation',
      'samp_rate'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [288, 116.0]
    rotation: 0
    state: true
- name: epy_block_1
  id: epy_block
  parameters:
    _source_code: "import numpy as np\nfrom gnuradio import gr\nimport sys\nprint(sys.path)\n\
      \n\nclass custom_message_to_bits(gr.basic_block):\n    def __init__(self, message=\"\
      Hello from FSK\", interval=10, print_interval=10, preamble=[170, 170]):\n  \
      \      gr.basic_block.__init__(self,\n            name=\"custom_message_to_bits\"\
      ,\n            in_sig=None,\n            out_sig=[np.uint8])\n\n        self.message\
      \ = message\n        self.interval = int(interval)\n        self.print_interval\
      \ = int(print_interval)\n        self.preamble = np.array(preamble, dtype=np.uint8)\n\
      \        self.message_bytes = np.frombuffer(message.encode('utf-8'), dtype=np.uint8)\n\
      \        self.set_output_multiple(8 * (len(self.preamble) + len(self.message_bytes)\
      \ + 1))  # Output in bits\n        self.counter = 0\n        self.print_counter\
      \ = 0\n\n    def byte_to_bits(self, byte_array):\n        return np.unpackbits(byte_array)\n\
      \n    def general_work(self, input_items, output_items):\n        output = output_items[0]\n\
      \        if self.counter % self.interval == 0:\n            header = np.array([len(self.message_bytes)],\
      \ dtype=np.uint8)\n            packet = np.concatenate((self.preamble, header,\
      \ self.message_bytes))\n            packet_bits = self.byte_to_bits(packet)\n\
      \n            if self.print_counter % self.print_interval == 0:\n          \
      \      print(f\"Header (message length): {header[0]}\")\n                print(f\"\
      Source Bits: {packet_bits}\")\n\n            self.print_counter += 1\n     \
      \       output[:len(packet_bits)] = packet_bits\n            produced = len(packet_bits)\n\
      \        else:\n            zeros_length = 8 * (len(self.preamble) + len(self.message_bytes)\
      \ + 1)\n            output[:zeros_length] = np.zeros(zeros_length, dtype=np.uint8)\n\
      \            produced = zeros_length\n        \n        self.counter += 1\n\
      \        self.consume_each(0)  # No input to consume\n        return produced\n"
    affinity: ''
    alias: ''
    comment: ''
    interval: '10'
    maxoutbuf: '0'
    message: '"Hello, This is a test message............."'
    minoutbuf: '0'
    preamble: '[0xAB, 0xCD, 0xEF]'
    print_interval: '10000'
  states:
    _io_cache: ('custom_message_to_bits', 'custom_message_to_bits', [('message', "'Hello
      from FSK'"), ('interval', '10'), ('print_interval', '10'), ('preamble', '[170,
      170]')], [], [('0', 'byte', 1)], '', ['interval', 'message', 'preamble', 'print_interval'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [32, 100.0]
    rotation: 0
    state: enabled
- name: epy_block_12_0
  id: epy_block
  parameters:
    _source_code: "import numpy as np\nfrom gnuradio import gr\n\nclass bits_to_message(gr.sync_block):\n\
      \    def __init__(self, preamble=[0xAB, 0xCD, 0xEF], header_length=1):\n   \
      \     gr.sync_block.__init__(\n            self,\n            name='Bits to\
      \ Message',\n            in_sig=[np.uint8],\n            out_sig=[]\n      \
      \  )\n        self.preamble = np.unpackbits(np.array(preamble, dtype=np.uint8))\n\
      \        self.header_length = header_length\n        self.buffer = np.array([],\
      \ dtype=np.uint8)\n        self.max_buffer_size = 1000000  # Set max buffer\
      \ size\n\n    def detect_preamble(self, data):\n        preamble_length = len(self.preamble)\n\
      \        for i in range(len(data) - preamble_length + 1):\n            if np.array_equal(data[i:i\
      \ + preamble_length], self.preamble):\n                return i + preamble_length\n\
      \        return -1\n\n    def work(self, input_items, output_items):\n     \
      \   self.buffer = np.concatenate((self.buffer, input_items[0]))\n\n        while\
      \ True:\n            preamble_index = self.detect_preamble(self.buffer)\n  \
      \          if preamble_index == -1:\n                break\n            \n \
      \           header_end = preamble_index + self.header_length * 8\n         \
      \   if header_end > len(self.buffer):\n                break\n            \n\
      \            header = np.array(self.buffer[preamble_index:header_end], dtype=np.uint8)\n\
      \            \n            if len(header) == 0:\n                break\n   \
      \         \n            message_length = np.packbits(header)[0]\n          \
      \  message_start = header_end\n            message_end = message_start + message_length\
      \ * 8\n\n            if message_end > len(self.buffer):\n                break\n\
      \n            message_bits = np.array(self.buffer[message_start:message_end],\
      \ dtype=np.uint8)\n            \n            if len(message_bits) == 0:\n  \
      \              break\n            \n            message_bytes = np.packbits(message_bits)\n\
      \            \n            # Print the decoded message \n            try:\n\
      \                message_text = message_bytes.tobytes().decode('utf-8')\n  \
      \              print(\"Decoded message:\", message_text)\n            except\
      \ UnicodeDecodeError:\n                pass  \n\n            self.buffer = self.buffer[message_end:]\n\
      \n        # Prevent buffer from growing \n        if len(self.buffer) > self.max_buffer_size:\n\
      \            self.buffer = self.buffer[-self.max_buffer_size:]\n\n        self.consume(0,\
      \ len(input_items[0]))\n        return 0\n\n"
    affinity: ''
    alias: ''
    comment: ''
    header_length: '1'
    maxoutbuf: '0'
    minoutbuf: '0'
    preamble: '[0xAB, 0xCD, 0xEF]'
  states:
    _io_cache: ('Bits to Message', 'bits_to_message', [('preamble', '[171, 205, 239]'),
      ('header_length', '1')], [('0', 'byte', 1)], [], '', ['header_length', 'preamble'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [992, 228.0]
    rotation: 0
    state: enabled
- name: epy_block_2
  id: epy_block
  parameters:
    _source_code: "import numpy as np\nfrom gnuradio import gr\n\nclass fsk_demod(gr.sync_block):\n\
      \    def __init__(self, samp_rate=1e6, fsk_deviation=500e3):\n        gr.sync_block.__init__(\n\
      \            self,\n            name='FSK Demodulation',\n            in_sig=[np.complex64],\n\
      \            out_sig=[np.int8]\n        )\n        self.samp_rate = samp_rate\n\
      \        self.fsk_deviation = fsk_deviation\n        self.counter = 0  # Initialize\
      \ the counter\n\n    def work(self, input_items, output_items):\n        in0\
      \ = input_items[0]\n        out = output_items[0]\n\n        for i in range(1,\
      \ len(in0)):\n            phase_diff = np.angle(in0[i] * np.conj(in0[i-1]))\n\
      \            out[i] = 1 if phase_diff > 0 else 0\n\n        # Print first 10\
      \ demodulated bits every 1000 iterations\n        #if self.counter % 1 == 0:\n\
      \            #print(\"Demodulated Bits:\", out[:0])\n        #self.counter +=\
      \ 1\n\n        return len(output_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    fsk_deviation: samp_rate/10
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: samp_rate
  states:
    _io_cache: ('FSK Demodulation', 'fsk_demod', [('samp_rate', '1000000.0'), ('fsk_deviation',
      '500000.0')], [('0', 'complex', 1)], [('0', 'byte', 1)], '', ['fsk_deviation',
      'samp_rate'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [752, 228.0]
    rotation: 0
    state: enabled
- name: qtgui_time_sink_x_0
  id: qtgui_time_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'True'
    axislabels: 'True'
    color1: blue
    color10: dark blue
    color2: red
    color3: green
    color4: black
    color5: cyan
    color6: magenta
    color7: yellow
    color8: dark red
    color9: dark green
    comment: ''
    ctrlpanel: 'False'
    entags: 'True'
    grid: 'False'
    gui_hint: ''
    label1: Signal 1
    label10: Signal 10
    label2: Signal 2
    label3: Signal 3
    label4: Signal 4
    label5: Signal 5
    label6: Signal 6
    label7: Signal 7
    label8: Signal 8
    label9: Signal 9
    legend: 'True'
    marker1: '-1'
    marker10: '-1'
    marker2: '-1'
    marker3: '-1'
    marker4: '-1'
    marker5: '-1'
    marker6: '-1'
    marker7: '-1'
    marker8: '-1'
    marker9: '-1'
    name: '""'
    nconnections: '1'
    size: '1024'
    srate: samp_rate
    stemplot: 'False'
    style1: '1'
    style10: '1'
    style2: '1'
    style3: '1'
    style4: '1'
    style5: '1'
    style6: '1'
    style7: '1'
    style8: '1'
    style9: '1'
    tr_chan: '0'
    tr_delay: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_slope: qtgui.TRIG_SLOPE_POS
    tr_tag: '""'
    type: complex
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    ylabel: Amplitude
    ymax: '1'
    ymin: '-1'
    yunit: '""'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [744, 332.0]
    rotation: 0
    state: true
- name: root_raised_cosine_filter_0
  id: root_raised_cosine_filter
  parameters:
    affinity: ''
    alias: ''
    alpha: '1'
    comment: ''
    decim: '10'
    gain: '1'
    interp: '10'
    maxoutbuf: '0'
    minoutbuf: '0'
    ntaps: '1000'
    samp_rate: samp_rate
    sym_rate: samp_rate/5
    type: interp_fir_filter_ccf
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [544, 84.0]
    rotation: 0
    state: enabled
- name: root_raised_cosine_filter_0_0
  id: root_raised_cosine_filter
  parameters:
    affinity: ''
    alias: ''
    alpha: '1'
    comment: ''
    decim: '10'
    gain: '10'
    interp: '1'
    maxoutbuf: '0'
    minoutbuf: '0'
    ntaps: '1000'
    samp_rate: samp_rate
    sym_rate: samp_rate/5
    type: fir_filter_ccf
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [448, 228.0]
    rotation: 0
    state: enabled
- name: soapy_limesdr_sink_0
  id: soapy_limesdr_sink
  parameters:
    affinity: ''
    alias: ''
    bandwidth: samp_rate
    center_freq: 915e6
    comment: ''
    dev_args: ''
    freq_correction: '0'
    gain: '40'
    samp_rate: samp_rate
    type: fc32
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [880, 56.0]
    rotation: 0
    state: enabled
- name: soapy_limesdr_source_0
  id: soapy_limesdr_source
  parameters:
    affinity: ''
    alias: ''
    bandwidth: samp_rate
    center_freq: 915e6
    comment: ''
    dev_args: ''
    freq_correction: '0'
    gain: '40'
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: samp_rate
    type: fc32
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [64, 260.0]
    rotation: 0
    state: enabled

connections:
- [epy_block_0, '0', root_raised_cosine_filter_0, '0']
- [epy_block_1, '0', epy_block_0, '0']
- [epy_block_2, '0', epy_block_12_0, '0']
- [root_raised_cosine_filter_0, '0', soapy_limesdr_sink_0, '0']
- [root_raised_cosine_filter_0_0, '0', epy_block_2, '0']
- [root_raised_cosine_filter_0_0, '0', qtgui_time_sink_x_0, '0']
- [soapy_limesdr_source_0, '0', root_raised_cosine_filter_0_0, '0']

metadata:
  file_format: 1
  grc_version: 3.10.3.0
