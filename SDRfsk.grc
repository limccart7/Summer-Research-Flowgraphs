options:
  parameters:
    author: ''
    catch_exceptions: 'True'
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: qt_gui
    hier_block_src_path: '.:'
    id: f
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: Not titled yet
    window_size: (1000,1000)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 8]
    rotation: 0
    state: enabled

blocks:
- name: samp_rate
  id: variable
  parameters:
    comment: ''
    value: '1000000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [200, 12]
    rotation: 0
    state: enabled
- name: blocks_char_to_float_0
  id: blocks_char_to_float
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    scale: '1'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [544, 180.0]
    rotation: 0
    state: enabled
- name: blocks_file_sink_0
  id: blocks_file_sink
  parameters:
    affinity: ''
    alias: ''
    append: 'False'
    comment: ''
    file: /home/ben/Documents/rx
    type: byte
    unbuffered: 'False'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [800, 260.0]
    rotation: 0
    state: enabled
- name: blocks_head_0
  id: blocks_head
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_items: '189'
    type: byte
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [600, 276.0]
    rotation: 0
    state: enabled
- name: blocks_message_debug_0
  id: blocks_message_debug
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    en_uvec: 'True'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1080, 448.0]
    rotation: 0
    state: enabled
- name: blocks_message_strobe_0
  id: blocks_message_strobe
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    msg: pmt.intern("TEST")
    period: '10000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [936, 356.0]
    rotation: 0
    state: enabled
- name: blocks_probe_rate_0
  id: blocks_probe_rate
  parameters:
    affinity: ''
    alias: ''
    alpha: '0.15'
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    mintime: '500.0'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [304, 980.0]
    rotation: 0
    state: disabled
- name: epy_block_0
  id: epy_block
  parameters:
    _source_code: "import numpy as np\nfrom gnuradio import gr\nimport pmt\n\nclass\
      \ pmt_to_string_pass(gr.basic_block):\n    def __init__(self):\n        gr.basic_block.__init__(self,\n\
      \            name=\"PMT to String Pass Through\",\n            in_sig=None,\n\
      \            out_sig=None)\n\n        # Register input and output message ports\n\
      \        self.message_port_register_in(pmt.intern(\"in\"))\n        self.message_port_register_out(pmt.intern(\"\
      out\"))\n        self.set_msg_handler(pmt.intern(\"in\"), self.handle_pmt_msg)\n\
      \n    def handle_pmt_msg(self, msg):\n        # Check if the message is a pair\n\
      \        if pmt.is_pair(msg):\n            # Extract the payload (cdr)\n   \
      \         payload = pmt.cdr(msg)\n            # Check if the payload is a byte\
      \ vector\n            if pmt.is_u8vector(payload):\n                # Extract\
      \ the byte array from the PMT\n                byte_array = pmt.u8vector_elements(payload)\n\
      \                # Convert the byte array to a string\n                decoded_message\
      \ = ''.join(chr(b) for b in byte_array)\n                # Convert the string\
      \ back to a PMT\n                new_msg = pmt.cons(pmt.car(msg), pmt.intern(decoded_message))\n\
      \                # Pass the new message to the output port\n               \
      \ self.message_port_pub(pmt.intern(\"out\"), new_msg)\n\n# To use this block\
      \ in GNU Radio, you would add it to your flowgraph.\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('PMT to String Pass Through', 'pmt_to_string_pass', [], [('in', 'message',
      1)], [('out', 'message', 1)], '', [])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [744, 432.0]
    rotation: 0
    state: enabled
- name: epy_block_1
  id: epy_block
  parameters:
    _source_code: "import numpy as np\nfrom gnuradio import gr\nimport pmt\n\nclass\
      \ custom_message_to_bits(gr.basic_block):\n    def __init__(self, preamble=[0xAB,\
      \ 0xCD, 0xEF], file_path=\"msg.txt\"):\n        gr.basic_block.__init__(self,\n\
      \            name=\"custom_message_to_bits\",\n            in_sig=None,\n  \
      \          out_sig=[np.uint8]\n        )\n        self.preamble = np.array(preamble,\
      \ dtype=np.uint8)\n        self.file_path = file_path\n        self.chunk_size\
      \ = 255\n        self.set_output_multiple(8 * (len(self.preamble) + self.chunk_size\
      \ + 1 + 1))  # Output in bits, including CRC\n        self.chunks = []\n   \
      \     self.current_chunk_index = 0\n        self.message_port_register_in(pmt.intern(\"\
      crc_status\"))\n        self.set_msg_handler(pmt.intern(\"crc_status\"), self.handle_crc_status)\n\
      \        self.message_port_register_out(pmt.intern(\"out\"))\n        self.update_message()\n\
      \        self.transmission_complete = False  # Flag to indicate transmission\
      \ complete\n        self.send_initial_chunk()  # Send the first chunk immediately\n\
      \n    def update_message(self):\n        try:\n            with open(self.file_path,\
      \ \"r\") as file:\n                message = file.read().strip()\n         \
      \   message_bytes = np.frombuffer(message.encode('utf-8'), dtype=np.uint8)\n\
      \            self.chunks = [self.add_crc(message_bytes[i:i + self.chunk_size])\
      \ for i in range(0, len(message_bytes), self.chunk_size)]\n        except FileNotFoundError:\n\
      \            print(\"Message file not found. Using default message.\")\n   \
      \         default_message = \"Default Message\"\n            message_bytes =\
      \ np.frombuffer(default_message.encode('utf-8'), dtype=np.uint8)\n         \
      \   self.chunks = [self.add_crc(message_bytes)]\n\n    def add_crc(self, chunk):\n\
      \        crc = 0\n        for byte in chunk:\n            crc ^= byte\n    \
      \        for _ in range(8):\n                if crc & 0x80:\n              \
      \      crc = (crc << 1) ^ 0x07  # Generator polynomial\n                else:\n\
      \                    crc <<= 1\n            crc &= 0xFF\n        crc_bytes =\
      \ np.array([crc], dtype=np.uint8)\n        return np.concatenate((chunk, crc_bytes))\n\
      \n    def send_initial_chunk(self):\n        if self.current_chunk_index < len(self.chunks):\n\
      \            chunk_data = pmt.init_u8vector(len(self.chunks[self.current_chunk_index]),\
      \ self.chunks[self.current_chunk_index])\n            chunk_ready_msg = pmt.cons(pmt.intern(\"\
      chunk_ready\"), chunk_data)\n            self.message_port_pub(pmt.intern(\"\
      out\"), chunk_ready_msg)\n            #print(f\"Sent initial chunk {self.current_chunk_index}.\"\
      )\n\n    def general_work(self, input_items, output_items):\n        if self.transmission_complete:\n\
      \            return -1  # Stop the block and flowgraph\n\n        output = output_items[0]\n\
      \n        if self.current_chunk_index < len(self.chunks):\n            chunk\
      \ = self.chunks[self.current_chunk_index]\n            payload_length = len(chunk)\
      \ - 1  # Exclude CRC length from payload length\n            header = np.array([payload_length],\
      \ dtype=np.uint8)\n            packet = np.concatenate((self.preamble, header,\
      \ chunk))\n            packet_bits = self.byte_to_bits(packet)\n\n         \
      \   output[:len(packet_bits)] = packet_bits\n            produced = len(packet_bits)\n\
      \        else:\n            print(\"File transmission complete.\")\n       \
      \     self.transmission_complete = True\n            return -1  # Signal to\
      \ GNU Radio to stop the flowgraph\n\n        self.consume_each(0)  # No input\
      \ to consume\n        return produced\n\n    def byte_to_bits(self, byte_array):\n\
      \        \"\"\"Converts a byte array to a bit array.\"\"\"\n        return np.unpackbits(byte_array)\n\
      \n    def handle_crc_status(self, msg):\n        if self.transmission_complete:\n\
      \            return  # Do nothing if transmission is complete\n\n        status\
      \ = pmt.symbol_to_string(pmt.car(msg))\n\n        if status == \"crc_pass\"\
      :\n            if self.current_chunk_index < len(self.chunks) - 1:\n       \
      \         self.current_chunk_index += 1\n                print(f\"CRC passed\
      \ for chunk {self.current_chunk_index}. Moving to the next chunk.\")\n     \
      \           \n                # Send the \"chunk_ready\" message along with\
      \ the chunk data\n                chunk_data = pmt.init_u8vector(len(self.chunks[self.current_chunk_index]),\
      \ self.chunks[self.current_chunk_index])\n                chunk_ready_msg =\
      \ pmt.cons(pmt.intern(\"chunk_ready\"), chunk_data)\n                self.message_port_pub(pmt.intern(\"\
      out\"), chunk_ready_msg)\n                \n            else:\n            \
      \    print(\"File transmission complete.\")\n                self.transmission_complete\
      \ = True\n\n        elif status == \"crc_fail\":\n            print(f\"Resending\
      \ chunk {self.current_chunk_index} due to CRC failure.\")\n"
    affinity: ''
    alias: ''
    comment: ''
    file_path: '''/home/ben/Documents/test2'''
    maxoutbuf: '0'
    minoutbuf: '0'
    preamble: '[0xAB, 0xCD, 0xEF, 0xA1, 0x54, 0xEB, 0xBA, 0xDC, 0xFF]'
  states:
    _io_cache: ('custom_message_to_bits', 'custom_message_to_bits', [('preamble',
      '[171, 205, 239]'), ('file_path', "'msg.txt'")], [('crc_status', 'message',
      1)], [('0', 'byte', 1), ('out', 'message', 1)], '', ['file_path', 'preamble'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [80, 112.0]
    rotation: 0
    state: enabled
- name: epy_block_12_0_0
  id: epy_block
  parameters:
    _source_code: "import numpy as np\nfrom gnuradio import gr\nimport pmt\n\nclass\
      \ bits_to_message(gr.sync_block):\n    def __init__(self, preamble=[0xAB, 0xCD,\
      \ 0xEF], header_length=1):\n        gr.sync_block.__init__(\n            self,\n\
      \            name='Bits to Message',\n            in_sig=[np.uint8],\n     \
      \       out_sig=[np.uint8]\n        )\n        self.preamble = np.unpackbits(np.array(preamble,\
      \ dtype=np.uint8))\n        self.header_length = header_length\n        self.buffer\
      \ = np.array([], dtype=np.uint8)\n        self.max_buffer_size = 1000000  #\
      \ Set max buffer size\n        self.message_port_register_out(pmt.intern(\"\
      crc_status\"))  # Unified output message port for CRC status\n        self.message_port_register_out(pmt.intern(\"\
      extracted_payload\"))  # Message port for extracted payloads\n        self.message_port_register_in(pmt.intern(\"\
      in\"))\n        self.set_msg_handler(pmt.intern(\"in\"), self.handle_message)\n\
      \        self.current_chunk_index = 0  # Initialize the current chunk index\n\
      \        self.process_flag = False  # Flag to control processing\n        self.file_complete\
      \ = False  # Flag to indicate if file transmission is complete\n        self.final_chunk_processed\
      \ = False  # Flag to indicate if the final chunk was successfully processed\n\
      \n    def handle_message(self, msg):\n        if pmt.is_pair(msg):\n       \
      \     key = pmt.car(msg)\n            if pmt.eq(key, pmt.intern(\"demodulated_packet_ready\"\
      )):\n                self.process_flag = True\n                demodulated_bits\
      \ = pmt.to_python(pmt.cdr(msg))\n                self.buffer = np.concatenate((self.buffer,\
      \ demodulated_bits))\n            elif pmt.eq(key, pmt.intern(\"file_complete\"\
      )):\n                self.file_complete = True\n\n    def detect_preamble(self,\
      \ data):\n        preamble_length = len(self.preamble)\n        for i in range(len(data)\
      \ - preamble_length + 1):\n            if np.array_equal(data[i:i + preamble_length],\
      \ self.preamble):\n                return i + preamble_length\n        return\
      \ -1\n\n    def compute_crc(self, data):\n        crc = 0\n        for byte\
      \ in data:\n            crc ^= byte\n            for _ in range(8):\n      \
      \          if crc & 0x80:\n                    crc = (crc << 1) ^ 0x07  # Generator\
      \ polynomial\n                else:\n                    crc <<= 1\n       \
      \     crc &= 0xFF\n        return np.array([crc], dtype=np.uint8)\n\n    def\
      \ check_crc(self, message, received_crc):\n        calculated_crc = self.compute_crc(message)\n\
      \        return np.array_equal(calculated_crc, received_crc)\n\n    def work(self,\
      \ input_items, output_items):\n        if not self.process_flag or self.final_chunk_processed:\n\
      \            return 0  # Do nothing if not ready to process or if the final\
      \ chunk has been processed\n\n        output_idx = 0  # Initialize output index\n\
      \n        while True:\n            preamble_index = self.detect_preamble(self.buffer)\n\
      \            if preamble_index == -1:\n                break\n\n           \
      \ header_end = preamble_index + self.header_length * 8\n            if header_end\
      \ > len(self.buffer):\n                break\n\n            header = self.buffer[preamble_index:header_end]\n\
      \            message_length = np.packbits(header)[0]\n            message_start\
      \ = header_end\n            message_end = message_start + message_length * 8\n\
      \            crc_start = message_end\n            crc_end = crc_start + 8\n\n\
      \            if crc_end > len(self.buffer):\n                break\n\n     \
      \       message_bits = self.buffer[message_start:message_end]\n            crc_bits\
      \ = self.buffer[crc_start:crc_end]\n\n            message_bytes = np.packbits(message_bits)\n\
      \            received_crc = np.packbits(crc_bits)\n\n            if self.check_crc(message_bytes,\
      \ received_crc):\n                output_msg = pmt.cons(pmt.intern(\"crc_pass\"\
      ), pmt.from_long(self.current_chunk_index))\n                output_items[0][output_idx:output_idx\
      \ + len(message_bytes)] = message_bytes\n                output_idx += len(message_bytes)\n\
      \                self.current_chunk_index += 1\n\n                # Output the\
      \ extracted payload for comparison in another block\n                payload_msg\
      \ = pmt.init_u8vector(len(message_bytes), message_bytes)\n                self.message_port_pub(pmt.intern(\"\
      extracted_payload\"), pmt.cons(pmt.from_long(self.current_chunk_index), payload_msg))\n\
      \n                # Check if this is the final chunk\n                if self.file_complete\
      \ and len(self.buffer[crc_end:]) == 0:\n                    self.final_chunk_processed\
      \ = True\n                    self.process_flag = False  # Stop processing after\
      \ the last chunk\n                    print(\"Final chunk processed. Halting\
      \ further CRC checks.\")\n                    break\n\n                # Clear\
      \ the processed data from the buffer\n                self.buffer = self.buffer[crc_end:]\n\
      \n            else:\n                #print(\"CRC failed\")\n              \
      \  output_msg = pmt.cons(pmt.intern(\"crc_fail\"), pmt.from_long(self.current_chunk_index))\n\
      \n            self.message_port_pub(pmt.intern(\"crc_status\"), output_msg)\n\
      \n        self.consume(0, len(input_items[0]))\n\n        if self.file_complete\
      \ and len(self.buffer) == 0:  # Check if file transmission is complete and no\
      \ more chunks are to be processed\n            print(\"File transmission complete.\
      \ Halting flowgraph.\")\n            return -1  # Signal to GNU Radio to stop\
      \ the flowgraph\n\n        return output_idx  # Return the number of items produced\n"
    affinity: ''
    alias: ''
    comment: ''
    header_length: '1'
    maxoutbuf: '0'
    minoutbuf: '0'
    preamble: '[0xAB, 0xCD, 0xEF, 0xA1, 0x54, 0xEB, 0xBA, 0xDC, 0xFF]'
  states:
    _io_cache: ('Bits to Message', 'bits_to_message', [('preamble', '[171, 205, 239]'),
      ('header_length', '1')], [('0', 'byte', 1), ('in', 'message', 1)], [('0', 'byte',
      1), ('extracted_payload', 'message', 1), ('crc_status', 'message', 1)], '',
      ['header_length', 'preamble'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [368, 368.0]
    rotation: 0
    state: enabled
- name: epy_block_1_0
  id: epy_block
  parameters:
    _source_code: "import numpy as np\nfrom gnuradio import gr\nimport pmt\n\nclass\
      \ custom_message_to_bits(gr.basic_block):\n    def __init__(self, preamble=[0xAB,\
      \ 0xCD, 0xEF], file_path=\"msg.txt\"):\n        gr.basic_block.__init__(self,\n\
      \            name=\"custom_message_to_bits\",\n            in_sig=None,\n  \
      \          out_sig=[np.uint8]\n        )\n        self.preamble = np.array(preamble,\
      \ dtype=np.uint8)\n        self.file_path = file_path\n        self.chunk_size\
      \ = 255\n        self.set_output_multiple(8 * (len(self.preamble) + self.chunk_size\
      \ + 1 + 1))  # Output in bits, including CRC\n        self.chunks = []\n   \
      \     self.current_chunk_index = 0\n        self.message_port_register_in(pmt.intern(\"\
      crc_pass\"))\n        self.message_port_register_in(pmt.intern(\"crc_fail\"\
      ))\n        self.set_msg_handler(pmt.intern(\"crc_pass\"), self.handle_crc_pass)\n\
      \        self.set_msg_handler(pmt.intern(\"crc_fail\"), self.handle_crc_fail)\n\
      \        self.message_port_register_out(pmt.intern(\"out\"))\n        self.update_message()\n\
      \        self.send_initial_chunk()  # Send the first chunk immediately\n\n \
      \   def update_message(self):\n        try:\n            with open(self.file_path,\
      \ \"r\") as file:\n                message = file.read().strip()\n         \
      \   message_bytes = np.frombuffer(message.encode('utf-8'), dtype=np.uint8)\n\
      \            self.chunks = [self.add_crc(message_bytes[i:i + self.chunk_size])\
      \ for i in range(0, len(message_bytes), self.chunk_size)]\n        except FileNotFoundError:\n\
      \            print(\"Message file not found. Using default message.\")\n   \
      \         default_message = \"Default Message\"\n            message_bytes =\
      \ np.frombuffer(default_message.encode('utf-8'), dtype=np.uint8)\n         \
      \   self.chunks = [self.add_crc(message_bytes)]\n\n    def add_crc(self, chunk):\n\
      \        crc = 0\n        for byte in chunk:\n            crc ^= byte\n    \
      \        for _ in range(8):\n                if crc & 0x80:\n              \
      \      crc = (crc << 1) ^ 0x07  # Generator polynomial\n                else:\n\
      \                    crc <<= 1\n            crc &= 0xFF\n        crc_bytes =\
      \ np.array([crc], dtype=np.uint8)\n        return np.concatenate((chunk, crc_bytes))\n\
      \n    def byte_to_bits(self, byte_array):\n        \"\"\"Converts a byte array\
      \ to a bit array.\"\"\"\n        return np.unpackbits(byte_array)\n\n    def\
      \ send_initial_chunk(self):\n        if self.current_chunk_index < len(self.chunks):\n\
      \            chunk_data = pmt.init_u8vector(len(self.chunks[self.current_chunk_index]),\
      \ self.chunks[self.current_chunk_index])\n            chunk_ready_msg = pmt.cons(pmt.intern(\"\
      chunk_ready\"), chunk_data)\n            self.message_port_pub(pmt.intern(\"\
      out\"), chunk_ready_msg)\n            print(f\"Sent initial chunk {self.current_chunk_index}.\"\
      )\n\n    def general_work(self, input_items, output_items):\n        output\
      \ = output_items[0]\n\n        if self.current_chunk_index < len(self.chunks):\n\
      \            chunk = self.chunks[self.current_chunk_index]\n            payload_length\
      \ = len(chunk) - 1  # Exclude CRC length from payload length\n            header\
      \ = np.array([payload_length], dtype=np.uint8)\n            packet = np.concatenate((self.preamble,\
      \ header, chunk))\n            packet_bits = self.byte_to_bits(packet)\n\n \
      \           output[:len(packet_bits)] = packet_bits\n            produced =\
      \ len(packet_bits)\n        else:\n            zeros_length = 8 * (len(self.preamble)\
      \ + self.chunk_size + 1 + 1)  # Including CRC\n            output[:zeros_length]\
      \ = np.zeros(zeros_length, dtype=np.uint8)\n            produced = zeros_length\n\
      \n        self.consume_each(0)  # No input to consume\n        return produced\n\
      \n    def handle_crc_pass(self, msg):\n        if self.current_chunk_index <\
      \ len(self.chunks) - 1:\n            self.current_chunk_index += 1\n       \
      \     print(f\"CRC passed for chunk {self.current_chunk_index}. Moving to the\
      \ next chunk.\")\n            \n            # Send the \"chunk_ready\" message\
      \ along with the chunk data\n            chunk_data = pmt.init_u8vector(len(self.chunks[self.current_chunk_index]),\
      \ self.chunks[self.current_chunk_index])\n            chunk_ready_msg = pmt.cons(pmt.intern(\"\
      chunk_ready\"), chunk_data)\n            self.message_port_pub(pmt.intern(\"\
      out\"), chunk_ready_msg)\n            \n        else:\n            print(\"\
      File transmission complete.\")\n            self.current_chunk_index = len(self.chunks)\
      \  # To ensure transmission stops\n\n    def handle_crc_fail(self, msg):\n \
      \       print(f\"Resending chunk {self.current_chunk_index} due to CRC failure.\"\
      )\n"
    affinity: ''
    alias: ''
    comment: ''
    file_path: '''/home/ben/Documents/test2'''
    maxoutbuf: '0'
    minoutbuf: '0'
    preamble: '[0xAB, 0xCD, 0xEF, 0xA1, 0x54, 0xEB, 0xBA, 0xDC, 0xFF]'
  states:
    _io_cache: ('custom_message_to_bits', 'custom_message_to_bits', [('preamble',
      '[171, 205, 239]'), ('file_path', "'msg.txt'")], [('crc_pass', 'message', 1),
      ('crc_fail', 'message', 1)], [('0', 'byte', 1), ('out', 'message', 1)], '',
      ['file_path', 'preamble'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [32, 1000.0]
    rotation: 0
    state: disabled
- name: epy_block_2
  id: epy_block
  parameters:
    _source_code: "import numpy as np\nfrom gnuradio import gr\nimport pmt\n\nclass\
      \ blk(gr.sync_block):\n    def __init__(self, samp_rate=1e6, fsk_deviation=500e3):\n\
      \        gr.sync_block.__init__(\n            self,\n            name='FSK Modulation',\n\
      \            in_sig=[np.uint8],\n            out_sig=[np.complex64]\n      \
      \  )\n        self.samp_rate = samp_rate\n        self.fsk_deviation = fsk_deviation\n\
      \        self.center_freq = 0\n        self.phase_inc0 = 2.0 * np.pi * (self.center_freq\
      \ - self.fsk_deviation) / self.samp_rate\n        self.phase_inc1 = 2.0 * np.pi\
      \ * (self.center_freq + self.fsk_deviation) / self.samp_rate\n        self.phase\
      \ = 0\n\n        # Register message port to receive chunk_ready messages\n \
      \       self.message_port_register_in(pmt.intern(\"in\"))\n        self.set_msg_handler(pmt.intern(\"\
      in\"), self.handle_message)\n\n        self.chunk_data = None  # Store chunk\
      \ data when received\n\n    def handle_message(self, msg):\n        # Handle\
      \ the \"chunk_ready\" message\n        if pmt.is_pair(msg):\n            key\
      \ = pmt.car(msg)\n            if pmt.eq(key, pmt.intern(\"chunk_ready\")):\n\
      \                self.chunk_data = pmt.to_python(pmt.cdr(msg))\n           \
      \     #print(f\"Received chunk: {self.chunk_data[:10]}\")  # Debug: print the\
      \ first 10 bits of the chunk\n\n    def work(self, input_items, output_items):\n\
      \        out = output_items[0]\n        in0 = input_items[0]\n\n        # Process\
      \ the input data\n        if len(in0) > 0:  # Ensure there's input data to process\n\
      \            #print(f\"Modulating data: {in0[:10]}\")  # Debug: print the first\
      \ 10 bits of input data\n            for i in range(len(in0)):\n           \
      \     if in0[i] == 0:\n                    self.phase += self.phase_inc0\n \
      \               else:\n                    self.phase += self.phase_inc1\n \
      \               out[i] = np.exp(1j * self.phase)\n                if self.phase\
      \ > 2.0 * np.pi:\n                    self.phase -= 2.0 * np.pi\n        else:\n\
      \            print(\"Received empty input data\")  # Debug: indicate when input\
      \ data is empty\n\n        return len(out)\n"
    affinity: ''
    alias: ''
    comment: ''
    fsk_deviation: '250000'
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: '1000000.0'
  states:
    _io_cache: ('FSK Modulation', 'blk', [('samp_rate', '1000000.0'), ('fsk_deviation',
      '500000.0')], [('0', 'byte', 1), ('in', 'message', 1)], [('0', 'complex', 1)],
      '', ['fsk_deviation', 'samp_rate'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [328, 144.0]
    rotation: 0
    state: enabled
- name: epy_block_2_0
  id: epy_block
  parameters:
    _source_code: "import numpy as np\nfrom gnuradio import gr\nimport pmt\n\nclass\
      \ fsk_demod(gr.sync_block):\n    def __init__(self, samp_rate=1e6, fsk_deviation=500e3):\n\
      \        gr.sync_block.__init__(\n            self,\n            name='FSK Demodulation',\n\
      \            in_sig=[np.complex64],\n            out_sig=[np.int8]\n       \
      \ )\n        self.samp_rate = samp_rate\n        self.fsk_deviation = fsk_deviation\n\
      \        self.counter = 0  # Initialize the counter\n\n        # Register a\
      \ message output port\n        self.message_port_register_out(pmt.intern(\"\
      out\"))\n\n    def work(self, input_items, output_items):\n        in0 = input_items[0]\n\
      \        out = output_items[0]\n\n        for i in range(1, len(in0)):\n   \
      \         phase_diff = np.angle(in0[i] * np.conj(in0[i-1]))\n            out[i]\
      \ = 1 if phase_diff > 0 else 0\n\n        # Send a \"demodulated_packet_ready\"\
      \ message after processing\n        demodulated_bits = pmt.init_u8vector(len(out),\
      \ out)\n        demodulated_packet_ready_msg = pmt.cons(pmt.intern(\"demodulated_packet_ready\"\
      ), demodulated_bits)\n        self.message_port_pub(pmt.intern(\"out\"), demodulated_packet_ready_msg)\n\
      \n        return len(output_items[0])\n\n"
    affinity: ''
    alias: ''
    comment: ''
    fsk_deviation: '250000'
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: samp_rate
  states:
    _io_cache: ('FSK Demodulation', 'fsk_demod', [('samp_rate', '1000000.0'), ('fsk_deviation',
      '500000.0')], [('0', 'complex', 1)], [('0', 'byte', 1), ('out', 'message', 1)],
      '', ['fsk_deviation', 'samp_rate'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [280, 240.0]
    rotation: 0
    state: enabled
- name: qtgui_time_sink_x_0
  id: qtgui_time_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    axislabels: 'True'
    color1: blue
    color10: dark blue
    color2: red
    color3: green
    color4: black
    color5: cyan
    color6: magenta
    color7: yellow
    color8: dark red
    color9: dark green
    comment: ''
    ctrlpanel: 'False'
    entags: 'True'
    grid: 'False'
    gui_hint: ''
    label1: Signal 1
    label10: Signal 10
    label2: Signal 2
    label3: Signal 3
    label4: Signal 4
    label5: Signal 5
    label6: Signal 6
    label7: Signal 7
    label8: Signal 8
    label9: Signal 9
    legend: 'True'
    marker1: '-1'
    marker10: '-1'
    marker2: '-1'
    marker3: '-1'
    marker4: '-1'
    marker5: '-1'
    marker6: '-1'
    marker7: '-1'
    marker8: '-1'
    marker9: '-1'
    name: '""'
    nconnections: '1'
    size: '1024'
    srate: samp_rate
    stemplot: 'False'
    style1: '1'
    style10: '1'
    style2: '1'
    style3: '1'
    style4: '1'
    style5: '1'
    style6: '1'
    style7: '1'
    style8: '1'
    style9: '1'
    tr_chan: '0'
    tr_delay: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_slope: qtgui.TRIG_SLOPE_POS
    tr_tag: '""'
    type: float
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    ylabel: Amplitude
    ymax: '1'
    ymin: '-1'
    yunit: '""'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [896, 140.0]
    rotation: 0
    state: enabled
- name: root_raised_cosine_filter_0
  id: root_raised_cosine_filter
  parameters:
    affinity: ''
    alias: ''
    alpha: '.6'
    comment: ''
    decim: '10'
    gain: '1'
    interp: '10'
    maxoutbuf: '0'
    minoutbuf: '0'
    ntaps: '100'
    samp_rate: samp_rate
    sym_rate: '250000'
    type: interp_fir_filter_ccf
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [496, 28.0]
    rotation: 0
    state: enabled
- name: root_raised_cosine_filter_0_0
  id: root_raised_cosine_filter
  parameters:
    affinity: ''
    alias: ''
    alpha: '.6'
    comment: ''
    decim: '10'
    gain: '1'
    interp: '1'
    maxoutbuf: '0'
    minoutbuf: '0'
    ntaps: '100'
    samp_rate: samp_rate
    sym_rate: '250000'
    type: fir_filter_ccf
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [72, 340.0]
    rotation: 0
    state: enabled
- name: virtual_sink_0
  id: virtual_sink
  parameters:
    alias: ''
    comment: ''
    stream_id: ''
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [736, 200.0]
    rotation: 0
    state: enabled
- name: virtual_source_0
  id: virtual_source
  parameters:
    alias: ''
    comment: ''
    stream_id: ''
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [24, 260.0]
    rotation: 0
    state: enabled

connections:
- [blocks_char_to_float_0, '0', qtgui_time_sink_x_0, '0']
- [blocks_head_0, '0', blocks_file_sink_0, '0']
- [blocks_message_strobe_0, strobe, blocks_message_debug_0, print]
- [epy_block_0, out, blocks_message_strobe_0, set_msg]
- [epy_block_1, '0', epy_block_2, '0']
- [epy_block_1, out, epy_block_2, in]
- [epy_block_12_0_0, '0', blocks_head_0, '0']
- [epy_block_12_0_0, crc_status, epy_block_1, crc_status]
- [epy_block_12_0_0, extracted_payload, epy_block_0, in]
- [epy_block_2, '0', root_raised_cosine_filter_0, '0']
- [epy_block_2_0, '0', blocks_char_to_float_0, '0']
- [epy_block_2_0, '0', epy_block_12_0_0, '0']
- [epy_block_2_0, out, epy_block_12_0_0, in]
- [root_raised_cosine_filter_0, '0', virtual_sink_0, '0']
- [root_raised_cosine_filter_0_0, '0', epy_block_2_0, '0']
- [virtual_source_0, '0', root_raised_cosine_filter_0_0, '0']

metadata:
  file_format: 1
  grc_version: 3.10.3.0
